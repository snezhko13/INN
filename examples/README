Basic Definitions

A service is the work performed in which a service provider (one that serves) 
exerts acquired abilities to execute a computation.

Explicit references to providers are not required!

A reference to a provider and/or its action is called a signature.

A signature specifies an activity by an operation and its service fiType
(context-oriented Java class or interface).
	
Service data and control strategy are context-based - distributed associative storage.

A task is an elementary service defined by a signature with its data and control contexts.

An exertion is a compound service defining collaborating providers-federation-to be exerted 
by the SORCER Operating System (SOS). It is a structured composition of tasks and exertions.
	
An exertion expressed in the Service Modeling Language (SML) is called a service script or sorcer.netlet.


Service Provider exerts acquired abilities to execute a task
	- defines its service types
  	- implements and owns its service types
 	- satisfy three neutralities (location, protocol, implementation)

Service Exertion specifies runtime collaboration of providers - federation
  	- specifies federation's members (composition with dependencies)
 	- specifies federation's data context and data flow
  	- specifies federation's control strategy

The Service interface (Service#service(Exertion)) is implemented by:
	- service provider
	- exertion
	- service context (model)

SORCER Operating System (SOS)
	- executes exertions expressed in SML
	- manages runtime service federations for exertions
	- provides a service-oriented shell (sosh) for the SOS

###############################################################################

SML examples in the SORCER Project

1. Collections used in SML
	eol/src/test/java/sorcer/arithmetic/collections
	
2. Service selects, providers, services (exertions),
   and service data (contexts) in  SML
	eol/test/java/sorcer/eol/services
		
3. Intro to service provider/requestor development
	worker/src/main/java/sorcer/worker/provider
	worker/src/main/java/sorcer/worker/requestor
	worker/test/java/sorcer/worker/tests
	
4. Arithmetic providers and requestors, 
   contexts and exertions as providers
	eol/main/java/sorcer/arithmetic/provider
	eol/main/java/sorcer/arithmetic/requestor
	
5. Service contexts
	eol/test/java/sorcer/eol/contexts

6. Exertions: tasks, jobs, and blocks
	eol/test/java/sorcer/eol/tasks	
	eol/test/java/sorcer/eol/jobs	
	eol/test/java/sorcer/eol/blocks	
	
7. Contexts and  proc-models
	eol/test/java/sorcer/eol/contexts
	test/java/sorcer/arithmetic/parModels
	
8. Par-models, providers and agents
	pml/main/java/sorcer/pml/model
	pml/main/java/sorcer/pml/provider
	pml/test/java/sorcer/pml/modeling
	
9. Transdisciplinary computing - collaborative agregation of exertions and models
   TODO: Proxying ents and args in exertions and models