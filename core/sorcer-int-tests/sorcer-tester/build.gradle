/*
 * Copyright to the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

version = sorcerVersion

dependencies {
    compile project(":sorcer-lib")
    testCompile project(':sos-exertmonitor')
    testCompile project(':sorcer-test')
    testRuntime libs.slf4j
    testRuntime libs.logback
}

task arithmeticPrvDlJar(type: Jar) {
    manifest {
        attributes("Implementation-Title": "SORCER Arithmetic tester Exported Classes",
                   "Implementation-Version": version)
    }
    classifier = "dl"
    dependsOn classes
    from sourceSets.main.output
    include('sorcer/arithmetic/tester/provider/*')
}

task arithmeticReqJar(type: Jar) {
    manifest {
        attributes("Implementation-Title": "SORCER Arithmetic Tester Requestor", "Implementation-Version": version)
    }
    classifier = "req"
    dependsOn classes
    from sourceSets.main.output
    include('sorcer/arithmetic/tester/requestor/**')
}

def deployConfig = file("build/configs/addr-prv-deploy.config")
processResources.dependsOn 'createDeployConfig'

task createDeployConfig(type: Copy) {
    from 'configs'
    into "${project.buildDir.path}/configs"
    include 'adder-prv.config'
    doLast {
        file("${project.buildDir.path}/configs/adder-prv.config").renameTo(deployConfig)
    }
}

artifacts {
    archives arithmeticPrvDlJar
    archives arithmeticReqJar
    archives file: deployConfig, classifier: "deploy"
}

install.dependsOn(['arithmeticPrvDlJar', 'arithmeticReqJar', ':sorcer-platform:install', ':sorcer-resolving-loader:install', ':sorcer-dl:install'])
build.dependsOn(install)

def repoPath() {
	return "org/sorcer/sorcer-tester/${version}"
}

bootme {
    starterConfig = file("${projectDir.path}/configs/StartAll.groovy")
    systemProperties = ["relative.repo.path" : repoPath(), "webster.url" : websterUrl]
//    spawn = false
//    debug = true
}

test {
    systemProperty "java.rmi.server.codebase",
                   "${websterUrl}/${repoPath()}/sorcer-tester-${version}-dl.jar ${websterUrl}/sorcer-dl-${version}.jar ${websterUrl}/jsk-dl-${riverVersion}.jar"

    testLogging {
        events "passed", "skipped", "failed"/*, "standardOut"*, "standardError"*/
    }
//    dependsOn([install])
    dependsOn([install, bootme])
    finalizedBy(haltme)
}
test.onlyIf{ file("${sorcerDistHome}").exists() }