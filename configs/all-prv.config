/* 
A SORCER Provider dependency injection generic template.
The template defines deployment configuration of the service provider.
Customize this deployment template accordingly.

It uses component entry names used by in the SORCER environment
and used by the sorcer.core.provider.SorcerProvider component.

Provider configuration attributes: 'name' and 'publishedInterfaces' are mandatory.

First, SORCER environment properties are loaded - Env.getEnv(). 
They are declared usually in the file 'iGrid/configs/sorcer.env' and 
copied to the iGrid classpath 'iGrid/classes/sorcer/util' 
by the target 'compileSources' defined in 'iGrid/modules/common-build.xml'
The sorcer.env file is read form one location only as follows:
i.   as specified by the JVM system property 'sorcer.env.file'- recommended, 
ii.  current directory, 
iii. iGrid/classes/sorcer/util directory - when included in the provider's jar.
The SORCER environment properties are common for all providers and can be 
overwritten by corresponding deployment properties for individual providers.

Second, domain-specific provider 'properties' are loaded from a provider properties 
file, if available. The properties filename is defined by 'properties' in a provider's
deployment file. Using properties file is recommended for application specific 
attributes used by the application provider, access by Provider#getProperty.

Third, properties from a provider deployment file (in this format) are loaded. 
The syntax of this deployment file is defined by net.jini.config.ConfigurationFile.
For a property value any Java object can be used. Configuration args are identified
by a component (sorcer.core.provider.ServiceExerter) and a name. A SORCER provider
retrieves args as specified below and supply data to use when configuring
its presence on the network as required by the SORCER operating system.

Forth, selected properties defined as Java system properties override previously
set properties from: sorcer.env or Jini configuration.
For example, to use your SORCER environment file, specify in your 'provider-run.xml;:
<sysproperty key="sorcer.env.file" value="../configs/sorcer.env" />
or
<sysproperty key="sorcer.env.file" value="${iGrid.home}/configs/sorcer.env" />
To use JavaSpace workers with your provider, specify:
<sysproperty key="provider.space.enabled" value="true" /> or
spaceEnabled = true in this provider deployment file.

by Mike Sobolewski, sobol@sorcersoft.org
*/

import net.jini.jrmp.*;
import net.jini.jeri.*;
import net.jini.jeri.tcp.*;
import sorcer.core.*;
import net.jini.core.entry.Entry;
import net.jini.lookup.entry.*;
import sorcer.arithmetic.*;

sorcer.core.provider.ServiceExerter {
 		// service provider properties - for domain specific properties
        propertiesFile = "..${/}configs${/}PROVIDER_NAME_HERE.properties";
        
        /* service provider generic properties */
		name = "PROVIDER_NAME_HERE";
		/* overrides the sorce.env property: sorcer.provider.name.suffixed or sorcer.name.suffix  as follows:
		     nameSuffixed = "false"; -  ignore global suffix and use provider's own name
		     nameSuffixed = "mySuffix"; - ignore global suffix and use "mySuffix" for this provider name
		     nameSuffixed = "true";  - default behavior, use globally set suffix 
		 	   either by setting sorcer.provider.name.suffixed  
		 	   or sorcer.provider.name.suffix in the sorcer.env file.
		*/
		//nameSuffixed = "true";
		description = "ENTER_DESCRIPTION_HERE";
		location = "ENTER_LOCATION_HERE";
		// published interfaces for space computing
		publishedInterfaces = new Class[] { FULLY_QUALIFIED_CLASSNAME_HERE.class };
		// reuse persisted service ID, if not persisted yet the provider persists it and reuses later
		// providerIdPersistent = false;
		
		/* Single thread model for service beans */
		//singleThreadModel = false;
		
		/* Service discovery/lookup */
		// provider lookupGroups used for registration
		// lookupGroups = new String[] { "sorcer.TEST" };
		// provider lookup groups used for finding services,
		// if not defined, the default value is equal to lookupGroups
		// accessorGroups = new String[] { "sorcer.TEST" };
		// comma separated URLs
		// lookupLocators = String[] { "jini://localhost" };
		// multicast and unicast discovery
		// lookupAccessor = "sorcer.util.ProviderAccessor";
		// multicast  only
		// lookupAccessor = "sorcer.util.ProviderLookup";
		// unicast or mixed discovery with QoS capabilities
		// lookupAccessor = "sorcer.util.QosProviderAccessor"
		// a providers registers its proxy so can be discovered.
		// discoveryEnabled = true;
		
		/* configure space workers for your provider */
   		// for each registered interfaces in 'publishedInterfaces' above.
		// spaceEnabled = false;
		// spaceSecurityEnabled = false;
		// If 'matchInterfaceOnly=true' then the provider processes all exertions 
		// in JavaSpace with its matching interface only, that means that the provider 
		// name given in the exertion's signature is ignored by the provider
		// matchInterfaceOnly = false;
   		// space worker transactional semantics and lease time
   		// workerTransactional=true;
   		// 60 seconds = 60*1000 ms
   		// workerTransactionLeaseTime=60000;
   		// workerCount = 1;	
   		// workerQueueSize = 1;
   		// if maxWorkerPoolSize > workerCount then maxWorkerPoolSize is
   		// equal to maxWorkerPoolSize otherwise equal to workerCount
   		// maxWorkerPoolSize = 0;
   		// indicates if your provider supports ServiceExerter#isReady(Exertion):boolean
   		// readiness before taking the exertion from the exertion space
		// spaceReadiness=false;
   		// worker 'take' or 'read' timeout
   		// workerTimeout=5000;
   			
   		/* registration args used by Jini lookup services */
		// args = new Entry[] { new Comment("JERI configuration example"),
		//	new Location("3", "310", "CP TTU") };
		// instead of location in args above you can use for example:
		// new Address("street", "organization", "organizationalUnit", 
		//	"locality", "stateOrProvince", "postalCode", "country")

		/* server configurations */
		// class server - webster
		// websterInterface = "127.0.0.1";
		// websterPort = 9000;
		// data server
		// dataServer = "localhost";
		// dataServcerPort = 9000;
		// dataRootDir = "data";
		// dataDir = "arithmetic";
		// HTTP server - web entry point to the SORCER environment			
		// portalHost = "sorcer.cs.ttu.edu";
		// portalPort = 80;
		
		// provider's thread management
		// threadManagement = true;
		// maxThreads = 10;
		// 15 seconds
		// threadTimeout = 15000;
		// loadFactor = 3.0f;
		// wait increment for the result of blocked threads 
		// waitForResultIncrement = 50;
		
		// whether a service is a shared resource 
		// and requires distributed locking
		// mutualExclusion = false;
		
		/* provider environment */
		providerGroups = new String[] { "sorcer.DEV", "sorcer.QA" };
		spaceGroup = new String[] { "sorcer.DEV" };
		// locators for unicast discovery
		// locators = new String[] { "jini://host1:port1", ..., "jini://hostn:portn" };
		// Enable service monitoring
		// monitorEnabled=false;
		// Enable to send out notifications
		// notifierEnabled = false;
		
		/* Remote Logging */
		// Enable remote provider logging
		// remoteProviderLogging = false;
		// Enable remote context logging
		// remoteContextLogging = false;
		// remoteLogManagerName = "Remote Log Manager";
		// remoteLoggerName = "sorcer.remote.jobber";
		// remoteLoggerLevel = Level.ALL;

		/* either Jini or RMI */
		// providerJinified = true;
		// disable discovery by providers and service accessor
		// system property to disable Reggie muticast announcements
		// com.sun.jini.reggi { multicastInterfaces = new java.net.NetworkInterface(0); }
		// sorcerMulticastEnabled = true;
		// lookupWait = 3000;
		// lookupCacheEnabled = false;
		// lookupMinMatches = 1;
		// lookupMaxMatches = 999;
					
		/* provider proxy configuration */	
        // if not declared the default provider exporter is BasicJeriExporter
        // exporter = new JrmpExporter(0);
        // exporter = new BasicJeriExporter(TcpServerEndpoint.getInstance(0), new BasicILFactory());
        // exporterInterface = "10.131.5.101";
        // exporterPort = 2222;
        
        /* 
        * smart proxy or provider's servers
        * for partners either partner object or its service type;
        * exporters are required for partners, otherwise the discovered will be used
        */
        // server = new RemoteArithmometer();
        // serverType = "sorcer.arithmetic.Averager";
        // serverName = "SORCER-Averager";
        // server exporter returning the inner proxy 
        // serverExporter = new JrmpExporter(0);
        // serverExporter = new BasicJeriExporter(TcpServerEndpoint.getInstance(0), new BasicILFactory());
        
        // smart proxy
        // smartProxy = new Arithmometer();
        
        /* SORCER service beans */
        // service objects that implement Java interfaces exposed on the network 
     	// by SORCER service providers:
        // as instances of service objects
        // beans = new Object[] { ... }
        // as classes of service objects listed as beans
        // beanClasses = new Class[] { ... }
       	// as Groovy scripts of service objects listed as beans
        // scriplets = new String[] { "configurable|configurator1|configurator2", ... }
        // where the object created from file "configurable' is passed on to the object
        // created from file 'configurator1, and so. The configurable object is declared
        // by the variable 'configurable' in Groovy scripts.
        
       	// Attached an icon image for the service provider
   		   iconName = sorcer.jpg;
   		
   		// Define a login context used to authenticate provider Subjects
   		// loginContext = new LoginContext("sorcer.provider.arithmetic.jeri.ssl.ArithmeticProvider");
}
	

