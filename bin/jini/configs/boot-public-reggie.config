import java.net.URL;
import com.sun.jini.start.ServiceDescriptor;
import com.sun.jini.config.ConfigUtil;
import sorcer.provider.boot.Booter;
import sorcer.provider.boot.SorcerDescriptorUtil;
import sorcer.provider.boot.SorcerServiceDescriptor;

// Phoenix activation service
// Reggie service registrar and lookup service
// Outrigger JavaSpace
// Mahalo transaction server service
// Norm lease renewal service
// Mercury event mailbox
// Fiddler server side lookup discovery service
	
com.sun.jini.start {
	home = "${iGrid.home}";
	policy = "${java.security.policy}";
	ps = System.getProperty("path.separator");
	
	// webster root directories
	sorcerLibPath 	= home + "${/}lib${/}sorcer${/}lib";
 	sorcerLibDlPath = home + "${/}lib${/}sorcer${/}lib-dl";
    jiniLibPath 	= home + "${/}lib${/}river${/}lib";
    jiniLibDLPath 	= home + "${/}lib${/}river${/}lib-dl";
    rioLibPath 		= home + "${/}lib${/}rio";
    blitzLib		= home + "${/}lib${/}common${/}blitz";
    otherLib		= blitzLib + "${/}thirdpartylib";
    deployPath 		= home + "${/}deploy";
    
	port = Booter.getWebsterPort(); 
	//address = Booter.getWebsterInterface();
	//startPort = Booter.getWebsterStartPort();
	//endPort = Booter.getWebsterEndPort();
    
    serviceDescriptors = new ServiceDescriptor[] {
        /* SORCER Webster, set to serve up root directories */
        // (String policy, int port, String[] roots, String address, int startPort, int endPort, boolean debug)
        SorcerDescriptorUtil.getWebster(policy, port,
                                         new String[] { sorcerLibPath,
                                         			    sorcerLibDlPath,
                                         			    jiniLibDLPath,
                                                        rioLibPath,
                                                        jiniLibPath,
                                                        blitzLib,
                                                        deployPath }),
/*
        new SorcerServiceDescriptor(
            "browser-dl.jar jsk-dl.jar",
            policy,
            jiniLibPath + "${/}browser.jar",
            "com.sun.jini.example.browser.Browser",
            new String[] { home + "${/}bin${/}jini${/}configs${/}browser.config" }),
*/

        new SorcerServiceDescriptor(
            "reggie-dl.jar jsk-dl.jar",
            policy,
            jiniLibPath + "/reggie.jar",
            "com.sun.jini.reggie.TransientRegistrarImpl",
            new String[] { home + "${/}bin${/}jini${/}configs${/}reggie-public-boot.config" })
/*
    	new SorcerServiceDescriptor(
            "mahalo-dl.jar jsk-dl.jar",
            policy,
            jiniLibPath + "/mahalo.jar",
            "com.sun.jini.mahalo.TransientMahaloImpl",
            new String[] { home + "${/}bin${/}jini${/}configs${/}mahalo-boot.config" }),

        new SorcerServiceDescriptor(
            "outrigger-dl.jar jsk-dl.jar",
            policy,
            jiniLibPath + "/outrigger.jar",
            "com.sun.jini.outrigger.TransientOutriggerImpl",
            new String[] { home + "${/}bin${/}jini${/}configs${/}outrigger.config" }),

       new SorcerServiceDescriptor(
           "fiddler-dl.jar jsk-dl.jar",
           policy,
           jiniLibPath + "/fiddler.jar",
           "com.sun.jini.fiddler.TransientFiddlerImpl",
           new String[] { home + "${/}bin${/}jini${/}configs${/}fiddler.config" }),

        new SorcerServiceDescriptor(
            "mercury-dl.jar jsk-dl.jar",
            policy,
            jiniLibPath + "/mercury.jar",
            "com.sun.jini.mercury.TransientMercuryImpl",
            new String[] { home + "${/}bin${/}jini${/}configs${/}mercury.config" }),


        new SorcerServiceDescriptor(
            "norm-dl.jar jsk-dl.jar",
            policy,
            jiniLibPath + "/norm.jar",
            "com.sun.jini.norm.TransientNormServerImpl",
            new String[] { home + "${/}bin${/}jini${/}configs${/}norm.config" }),

   		// Blitz
        new SorcerServiceDescriptor(
 			"blitz-dl.jar blitzui.jar",
            policy, 
            ConfigUtil.concat(new Object[] {
            	blitzLib, "${/}blitz.jar",
            	ps, blitzLib, "${/}blitzui.jar",
            	ps, otherLib, "${/}backport-util-concurrent60.jar",
            	ps, home, "${/}lib${/}common${/}je.jar",
            	ps, jiniLibPath, "${/}serviceui.jar",
            	ps, home, "${/}lib${/}river${/}lib-dl${/}outrigger-dl.jar",
            	ps, jiniLibPath, "${/}jsk-platform.jar" }
            	),
	        "org.dancres.blitz.remote.BlitzServiceImpl",
          	new String[] { home + "${/}bin${/}blitz${/}configs${/}blitz.config" })
*/
    };
}
